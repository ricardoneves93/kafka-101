---
version: '3'
services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.3.0'
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka-broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: INTERNAL://broker:19092,OUTSIDE://broker:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:19092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS_SEPARATOR: "$$'\n'"
      KAFKA_CREATE_TOPICS: |
        kafka-connect-configs:1:1:compact		
        kafka-connect-offsets:1:1:compact
        kafka-connect-status:1:1:compact
    depends_on:
      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:7.0.9
    container_name: schema-registry
    ports:
      - '8081:8081'
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    depends_on:
      - zookeeper
      - broker
  
  akhq:
    image: 'tchiotludo/akhq'
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: 'broker:19092'
              schema-registry:
                url: "http://schema-registry:8081"
    ports:
      - '8082:8080'
    depends_on:
      - zookeeper
      - broker
      - schema-registry

  kafka-connect:
    image: 'confluentinc/cp-kafka-connect:latest'
    container_name: kafka-connect
    ports:
      - '8083:8083'
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:19092'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'localhost'
      CONNECT_REST_PORT: '8083'
      CONNECT_GROUP_ID: 'kafka-connect'
      CONNECT_CONFIG_STORAGE_TOPIC: 'kafka-connect-configs'
      CONNECT_OFFSET_STORAGE_TOPIC: 'kafka-connect-offsets'
      CONNECT_STATUS_STORAGE_TOPIC: 'kafka-connect-status'
      CONNECT_PLUGIN_PATH: '/usr/share/confluent-hub-components/'
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.storage.StringConverter'
    depends_on:
      - broker
      - zookeeper
    command:
      - bash
      - -c
      - |
        # Install connector plugins
        # This will by default install into /usr/share/confluent-hub-components/ so make
        #  sure that this path is added to the plugin.path in the environment variables 
        confluent-hub install --no-prompt cjmatta/kafka-connect-irc:5.0.0
        # Launch the Kafka Connect worker
        /etc/confluent/docker/run &
        # Don't exit
        sleep infinity

#  kafka-connect-ui:
#    image: landoop/kafka-connect-ui:0.9.4
#    container_name: kafka-connect-ui
#    hostname: kafka-connect-ui
#    # kafka-connect-ui binds to port 8000, but we are going to expose it on our local
#    # machine on port 8002.
#    ports:
#      - "8002:8000"
#    environment:
#      # Required. Instructs the UI where it can find Kafka Connect.
#      CONNECT_URL: "http://kafka-connect:8083/"
#      # This instructs the docker image to use Caddy to proxy traffic to kafka-connect-ui.
#      PROXY: "true"
#    # kafka-connect-ui relies upon Kafka Connect.
#    # This will instruct docker to wait until those services are up
#    # before attempting to start kafka-connect-ui.
#    depends_on:
#      - kafka-connect